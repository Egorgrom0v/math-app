import { BackButton } from '@/components/BackButton'; // ‚úÖ –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø—É—Ç—å –≤–µ—Ä–Ω—ã–π
import { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { createClient } from '@supabase/supabase-js';
import { AppRoot, Section, Cell, List, Button } from '@telegram-apps/telegram-ui';
import { retrieveLaunchParams } from '@telegram-apps/sdk';
import { isTMA } from '@telegram-apps/bridge';

if (!isTMA('simple')) {
  alert('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤–Ω–µ Telegram. –û—Ç–∫—Ä–æ–π –≤ Telegram Mini Apps!');
}
// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Supabase
const supabaseUrl = 'https://aubxfkkdldrjkjgkaqrf.supabase.co'; // –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π URL
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImF1Ynhma2tkbGRyamtqZ2thcXJmIiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mzk0Nzc2OTUsImV4cCI6MjA1NTA1MzY5NX0.0QlE4Npo09owf-Y8vtRqog20VZA4jsuzWh0KzV88kj4';
const supabase = createClient(supabaseUrl, supabaseAnonKey);

export const LessonPage = () => {
  const { topic } = useParams<{ topic: string }>();
  const navigate = useNavigate();
  const [lesson, setLesson] = useState<any>(null);
  const [tasks, setTasks] = useState<string[]>([]);
  const [currentTask, setCurrentTask] = useState(0);
  const [isNoteOpen, setIsNoteOpen] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [loading, setLoading] = useState(true);

  // üìå –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram Mini Apps
  const { initData } = retrieveLaunchParams();
  const user = initData?.user;

  if (!user) {
    console.error('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram.');
  }

  const userId = user?.id.toString() || ''; // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å—Ç—Ä–æ–∫–∞)
  const firstName = user?.firstName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  const lastName = user?.lastName || null;
  const username = user?.username || null;
  const authDate = new Date(initData?.authDate || Date.now()).toISOString(); // –í—Ä–µ–º—è –≤—Ö–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç SQL

  useEffect(() => {
    const fetchLesson = async () => {
      setLoading(true);
      try {
        let { data, error } = await supabase
          .from('lessons')
          .select('*')
          .eq('title', topic)
          .single(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–¥–∏–Ω —É—Ä–æ–∫

        if (error) throw error;
        if (!data) throw new Error('–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');

        setLesson(data);
        setTasks(data.tasks || []);

        // üìå –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase (–µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç)
        await saveUserData(userId, firstName, lastName, username, authDate);
      } catch (error: any) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Ä–æ–∫–∞:', error);
        setError(error.message);
      } finally {
        setLoading(false);
      }
    };

    fetchLesson();
  }, [topic]);

  if (loading) return <p>–ó–∞–≥—Ä—É–∑–∫–∞ —É—Ä–æ–∫–∞...</p>;
  if (error) return <p>–û—à–∏–±–∫–∞: {error}</p>;

  const handleAnswer = async (answer: string) => {
    if (answer === lesson.correct_answers[currentTask]) {
      if (currentTask === tasks.length - 1) {
        await saveLessonProgress(userId, lesson.id); // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

        // üìå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ –≤ Supabase (+10 –±–∞–ª–ª–æ–≤ –∑–∞ —É—Ä–æ–∫)
        const { data, error } = await supabase
          .from('user_scores')
          .upsert({ user_id: userId, score: 10 }) // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
          .select();

        if (error) {
          console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤:', error);
        } else {
          console.log('–ë–∞–ª–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', data);
        }

        navigate('/congrats'); // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è
      } else {
        setCurrentTask((prev) => prev + 1);
      }
    } else {
      alert('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!');
    }
  };

  return (
    <>
      <BackButton /> 
      <AppRoot>
        <List>
          <Section header={`–£—Ä–æ–∫: ${lesson.title}`}>
            {/* –í–∏–¥–µ–æ */}
            <Cell subtitle="–í–∏–¥–µ–æ">
              <iframe
                src={lesson.video_url}
                title="–£—Ä–æ–∫"
                style={{
                  width: '100%',
                  aspectRatio: '16/9',
                  borderRadius: '8px',
                  border: '1px solid #ccc',
                }}
                allowFullScreen
              />
            </Cell>

            {/* –ö–æ–Ω—Å–ø–µ–∫—Ç */}
            <Cell subtitle="–ö–æ–Ω—Å–ø–µ–∫—Ç">
              <Button onClick={() => setIsNoteOpen(!isNoteOpen)}>
                {isNoteOpen ? '–°–∫—Ä—ã—Ç—å –∫–æ–Ω—Å–ø–µ–∫—Ç' : '–û—Ç–∫—Ä—ã—Ç—å –∫–æ–Ω—Å–ø–µ–∫—Ç'}
              </Button>
              {isNoteOpen && (
                <div style={{ padding: '10px', backgroundColor: '#f9f9f9', borderRadius: '8px' }}>
                  üìö {lesson.description}
                </div>
              )}
            </Cell>

            
            
            {/* –ó–∞–¥–∞–Ω–∏—è */}
            <Section header="–ó–∞–¥–∞–Ω–∏—è">
              <Cell>{tasks[currentTask]}</Cell>
              <input
                type="text"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç"
                onKeyDown={(e) => {
                  if (e.key === 'Enter') handleAnswer(e.currentTarget.value);
                }}
                style={{
                  width: '100%',
                  padding: '10px',
                  borderRadius: '15px',
                  border: '2px solid #58CC02',
                  fontSize: '16px',
                  textAlign: 'center',
                }}
              />
            </Section>
          </Section>
        </List>
      </AppRoot>
    </>
  );
};

// ‚úÖ **–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase**
async function saveUserData(userId: string, firstName: string, lastName: string | null, username: string | null, authDate: string) {
  const { data, error } = await supabase
    .from('users')
    .upsert(
      [{ user_id: userId, first_name: firstName, last_name: lastName, username: username, auth_date: authDate }]
    );

  if (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
  } else {
    console.log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', data);
  }
}

// ‚úÖ **–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ Supabase**
async function saveLessonProgress(userId: string, lessonId: number) {
  const { data, error } = await supabase
    .from('progress')
    .insert([{ user_id: userId, lesson_id: lessonId, completed_at: new Date().toISOString() }]);

  if (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
  } else {
    console.log('–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω:', data);
  }
}

export default LessonPage;